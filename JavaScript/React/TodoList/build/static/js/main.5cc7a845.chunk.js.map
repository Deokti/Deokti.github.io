{"version":3,"sources":["components/header-app/index.js","components/header-app/header-app.js","components/todo-add-form/index.js","components/todo-add-form/todo-add-form.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/App/index.js","components/App/App.js","index.js"],"names":["HeaderTitle","props","className","title","TodoAddForm","state","label","isSubmitForm","event","preventDefault","length","addNewItem","alert","setState","onToggleInput","target","value","onSubmit","this","type","placeholder","onChange","Component","TodoListItem","onDeleteItem","onClick","xmlns","width","height","viewBox","fill","d","TodoList","todo","items","map","id","key","App","countID","TodoItems","saveTodoLocalStorage","todoItems","todos","localStorage","getItem","JSON","parse","push","setItem","stringify","newTodoItems","createNewTodoItem","currentIdElement","findIndex","element","currentElementByName","newArrayAfterItemDeletion","slice","removeTodoLocalStroge","done","getSavedToLocalStorag","newArrayTodoLocal","item","splice","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cc7a845.chunk.js","sourcesContent":["import HeaderTitle from './header-app';\r\nexport default HeaderTitle;","import React from 'react';\r\n\r\nimport './header-app.css';\r\n\r\nconst HeaderTitle = (props) => <h1 className=\"header-app\">{props.title}</h1>\r\n\r\nexport default HeaderTitle;\r\n","import TodoAddForm from './todo-add-form';\r\nexport default TodoAddForm;","import React, { Component } from 'react';\r\n\r\nimport './todo-add-form.css';\r\n\r\nexport default class TodoAddForm extends Component {\r\n    state = {\r\n        label: ''\r\n    };\r\n\r\n    // Отключаем базовое поведение формы\r\n    // И передаём this.state.label в функцию\r\n    // которая передевалась из App\r\n    isSubmitForm = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Получаем label для меньшего написания\r\n        const { label } = this.state;\r\n\r\n        // Ограничиваем колличество символов\r\n        if (label.length >= 5 && label.length <= 60) this.props.addNewItem(label);\r\n        else alert('Для задачи, колличество символов должно быть более 5, но менее 60.');\r\n\r\n        // Когда текст написан, и нажата кнопка enter label очиститься,\r\n        // а поскольку input и label связаны, input очиститься то же.\r\n        this.setState({ label: '' });\r\n    }\r\n\r\n    // Передаём записанный в Input текст в this.state.label\r\n    onToggleInput = ({target}) => this.setState({ label: target.value });\r\n\r\n    render() {\r\n\r\n        return (\r\n            <form onSubmit={ this.isSubmitForm }>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"todo-add-form\" \r\n                    placeholder=\"Какого новое дело?\" \r\n                    value={ this.state.label }\r\n                    onChange={ this.onToggleInput }\r\n                />\r\n            </form> \r\n        );\r\n    }\r\n}","import TodoListItem from './todo-list-item';\r\nexport default TodoListItem;","import React from 'react';\r\n\r\nimport './todo-list-item.css';\r\n\r\nconst TodoListItem = ({label, onDeleteItem}) => {\r\n    return (\r\n        <span className=\"todo-list-item-template\"> \r\n            <p className=\"todo-list-item-label\">{ label }</p>\r\n\r\n            <button className=\"todo-list-item-delete\" onClick={ onDeleteItem }>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"19\" height=\"20\" viewBox=\"0 0 19 20\" fill=\"none\">\r\n                    <path d=\"M11.6 10L18.7 2.9C18.9 2.7 19 2.4 19 2.2 19 1.9 18.9 1.6 18.7 1.4L18.1 0.8C17.9 0.6 17.6 0.5 17.3 0.5 17.1 0.5 16.8 0.6 16.6 0.8L9.5 7.9 2.4 0.8C2.2 0.6 1.9 0.5 1.7 0.5 1.4 0.5 1.1 0.6 0.9 0.8L0.3 1.4C-0.1 1.8-0.1 2.5 0.3 2.9L7.4 10 0.3 17.1C0.1 17.3 0 17.6 0 17.8 0 18.1 0.1 18.4 0.3 18.6L0.9 19.2C1.1 19.4 1.4 19.5 1.7 19.5 1.9 19.5 2.2 19.4 2.4 19.2L9.5 12.1 16.6 19.2C16.8 19.4 17.1 19.5 17.3 19.5H17.3C17.6 19.5 17.9 19.4 18.1 19.2L18.7 18.6C18.9 18.4 19 18.1 19 17.8 19 17.6 18.9 17.3 18.7 17.1L11.6 10Z\" fill=\"#fff\"/>\r\n                </svg>\r\n            </button>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default TodoListItem;","import TodoList from './todo-list';\r\nexport default TodoList;","import React, { Component } from 'react';\r\n\r\nimport TodoListItem from '../todo-list-item';\r\n\r\nimport './todo-list.css';\r\n// componentDidMount()\r\n\r\nexport default class TodoList extends Component {\r\n\r\n    render() {\r\n        const { todo, onDeleteItem } = this.props;\r\n        // const getSavedToLocalStorag = JSON.parse(localStorage.getItem('todos'));\r\n\r\n        const items = todo.map(({ label, id }) => {\r\n            return (\r\n                <li className=\"todo-list-li\" key={id}>\r\n                    <TodoListItem \r\n                        label={label} \r\n                        onDeleteItem={ () => onDeleteItem(id) }\r\n                    />\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return <ul className=\"todo-list\">{ items }</ul>\r\n    }\r\n}\r\n","import App from './App';\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nimport HeaderTitle from '../header-app';\r\nimport TodoAddForm from '../todo-add-form';\r\nimport TodoList from '../todo-list';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n    // Просчёт countID для того, \r\n    // чтобы поместить это число в key\r\n    countID = 0;\r\n\r\n    // Создаём базовые списки дел\r\n    createNewTodoItem(label) {\r\n        return {\r\n            label,\r\n            done: false,\r\n            id: this.countID++\r\n        }\r\n    }\r\n    \r\n    state = {\r\n        TodoItems: []\r\n    }\r\n\r\n    // Функцию по созданию и сохранению данных в localStorage\r\n    saveTodoLocalStorage = (todoItems) => {\r\n        let todos;\r\n        if (localStorage.getItem('todos') === null) todos = [];\r\n        else todos = JSON.parse(localStorage.getItem('todos'));\r\n\r\n        todos.push(todoItems);\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }\r\n  \r\n    // Компонент действует при загрузке страницы\r\n    componentDidMount() {\r\n        this.setState(({ TodoItems }) => {\r\n            // Получаем элементы из localStroge и в помощью parse делаем массив\r\n            const getSavedToLocalStorag = JSON.parse(localStorage.getItem('todos'));\r\n\r\n            // Как выглядят элементы в разных состояниях\r\n            // console.log(\"DEFAULT:\", localStorage.getItem('todos'))\r\n            // console.log(\"PARSE:\", JSON.parse(localStorage.getItem('todos')))\r\n            // console.log(\"STRINGIFY:\", JSON.stringify(localStorage.getItem('todos')))\r\n\r\n\r\n            // Если внутри пусто, то ничего не происходит\r\n            if (getSavedToLocalStorag === null) return;\r\n\r\n            // Перебираем все названия дел из localStroge и на каждой итерации\r\n            // создаём нужную обёртку\r\n            const newArrayTodoLocal = getSavedToLocalStorag.map((item) => {\r\n                return this.createNewTodoItem(item);\r\n            });\r\n\r\n            // Записываем это в другую переменную,\r\n            // включая и те данные, которые были в TodoItems ранее\r\n            const allArray = [\r\n                ...TodoItems,\r\n                ...newArrayTodoLocal\r\n            ]\r\n\r\n            // Изменяем содержимое TodoItems на новое\r\n            return { TodoItems: allArray }\r\n        });  \r\n    }\r\n\r\n    // Добавляет новыое дело \r\n    // App => todo-add-form\r\n    addNewItem = (label) => {\r\n        // Когда всё произошло, данные state обвноявляются\r\n        // Для начала получаем TodoItems\r\n        this.setState(({ TodoItems }) => {\r\n            const newTodoItems = [\r\n                ...TodoItems,\r\n                this.createNewTodoItem(label),\r\n            ];\r\n            \r\n            // Записывет текст из label в localStroge\r\n            this.saveTodoLocalStorage(label);\r\n\r\n            // Возвращаем новый this.state.TodoItems\r\n            return { TodoItems: newTodoItems };\r\n        });\r\n    }\r\n\r\n    // Удаляем элемент из localStroge\r\n    removeTodoLocalStroge(todo) {\r\n        let todos;\r\n        if (localStorage.getItem('todos') === null) todos = [];\r\n        else todos = JSON.parse(localStorage.getItem('todos'));\r\n\r\n        // Получает текст в массиве, например [\"Первое дело\"]\r\n        // И удаляем его\r\n        todos.splice(todos.indexOf(todo), 1);\r\n\r\n        // Записываем в localStroge новые данные\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    }\r\n\r\n    // Реализуем удаление\r\n    // App => TodoList(id) => tood-list-item.onClick \r\n    onDeleteItem = (id) => {\r\n        this.setState(({ TodoItems }) => {\r\n            // Получаем и сравниваем id\r\n            const currentIdElement = TodoItems.findIndex(element => element.id === id);\r\n\r\n            // Получаем элемент элемент по индексу, а затем его label т.е текст\r\n            const currentElementByName = TodoItems[currentIdElement].label;\r\n\r\n            \r\n            // Создаём новый массив после удаления элемента\r\n            const newArrayAfterItemDeletion = [\r\n                // Копируем все элементы, которые были до того элемента,\r\n                // который ходим удалить\r\n                ...TodoItems.slice(0, currentIdElement),\r\n                \r\n                // Получаем все элементы + 1 (тот который мы удалили),\r\n                // после свершения задуманного\r\n                ...TodoItems.slice(currentIdElement + 1),\r\n            ]\r\n\r\n\r\n            // Удаляем элемент и localStroge\r\n            this.removeTodoLocalStroge(currentElementByName);\r\n\r\n            // Записываем полученное, как новое состояние state\r\n            return { TodoItems: newArrayAfterItemDeletion };\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        // Деструктуризация \r\n        const { TodoItems } = this.state;\r\n        // console.log('APP:', TodoItems)\r\n\r\n        return (\r\n            <section className=\"App\">\r\n                <HeaderTitle title=\"Список дел\" />\r\n                <div className=\"App-form\">\r\n                    <TodoAddForm addNewItem={ this.addNewItem } />\r\n                    <TodoList \r\n                        todo={ TodoItems } \r\n                        onDeleteItem={ this.onDeleteItem } \r\n                    />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    < App />,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}